# -*- coding: utf-8 -*-
"""mdb to neo4j migration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KPQLPTcL0WeytTmRLZJgNFdb4hY3jmbF

### Migration of triplets from MDB to Neo4j for Mistral hackathon
"""

# Commented out IPython magic to ensure Python compatibility.
# Installs
# %pip install -q pymongo
# %pip install -q neo4j

# import packages
from pymongo import MongoClient
from neo4j import GraphDatabase
import urllib.parse

# MongoDB connection
connection_string = "mongodb+srv://mistral_hackathon:vPzc3prjC6H1EoQB@age-house.dypq7r5.mongodb.net/"
db_name = "arxiv"
collection_name = "papers_for_review"

# Neo4j connection
neo4j_uri = os.environ["NEO4J_URI"],
neo4j_user = os.environ["NEO4J_USER"],
neo4j_password = os.environ["NEO4J_PASSWORD"],

# Connect to MongoDB
client = MongoClient(connection_string)
db = client[db_name]
collection = db[collection_name]

# Connect to Neo4j
driver = GraphDatabase.driver(neo4j_uri, auth=(neo4j_user, neo4j_password))

def add_triplet_to_neo4j(tx, subject, predicate, object_):
    query = (
        "MERGE (a:Resource {name: $subject}) "
        "MERGE (b:Resource {name: $object}) "
        "MERGE (a)-[r:RELATES {type: $predicate}]->(b)"
    )
    tx.run(query, subject=subject, predicate=predicate, object=object_)


# Process documents from MongoDB and load into Neo4j
with driver.session() as session:
    for doc in collection.find():
        # mongo_count = collection.count_documents({})
        subject = doc.get("subject")
        predicate = doc.get("predicate")
        object_ = doc.get("object")
        if subject and predicate and object_:
            session.write_transaction(add_triplet_to_neo4j, subject, predicate, object_)

# Close the Neo4j driver and MongoDB client
driver.close()
client.close()